function autofocus(obj,wave0, waveUnit,varargin)
% Set the film of the camera in focus for the specified wavelength
%
%   psfCamera.autofocus(wave0, waveUnit)
%Examples
%   1:    psfCamera.autofocus(555, 'nm')
%   2:    psfCamera.autofocus(0.555, 'mm')
%   3:    psfCamera.autofocus(2, 'index') second value in the vector
%
% The camera has a point source, lens, and film.
%
% INPUT
% wave0
% waveUnit = 'nm' or 'mm'or 'index'
% varargin  {1}: n_ob
% varargin  {2}: n_im


% OUTPUT
%
%
%

% MP Vistasoft Team, Copyright 2014


%% GET wavelength vector
wave=obj.get('wave');

%% HAVE I t

if not(exist('wave0')) || not(exist('waveUnit'))
    error ('Specify the wavelength for the autofocus, example:  psfCamera.autofocus(555, "nm")')
end

switch waveUnit
    case {'nm'}
        wave0=wave0; %wave is in nm as well as wave0
    case {'um'}
        wave0=wave0*1e3; %wave is in nm, instead wave0 wan in um
    case {'mm'}
        wave0=wave0*1e6; %wave is in nm, instead wave0 wan in mm
    case {'m'}
        wave0=wave0*1e9; %wave is in nm, instead wave0 wan in m
    case {'index';'ind'}
        wave0=wave(wave0); % get the wave specified by the index
    otherwise
        error ('Specify a wavelength for the autofocus, example:  psfCamera.autofocus(555, "nm") ')
end

%index of the selected wavelength
ind0=find(wave==wave0);

%check if the selceted wavelenght exist and is just one 
if (isempty(ind0)) || (length(ind0)>1)
    error (' Not found a "unique" wavelength matching to the selected ones!!!!')
end


%% SET the film position in focus 
% Get input
lens=obj.lens;
film=obj.film;
pSource=obj.pointSource;

if nargin>3
   n_ob = varargin{1};    n_im = varargin{2};   
else
    n_ob = 1;    n_im = 1;                    
end

%Find Gaussian Image Point (wavelength dependence)
imagePoint = lens.findImagePoint(pSource,n_ob,n_im);

%Right distance for the selected wavelength
dist0=image(ind0,3); % z position


%Get previous film position
oldPos=film.position;

% Set new distance
oldPos(3)=dist0;

% film=pbrtFilmC('position', oldPos, 'size', filmSize, 'wave', wave, 'resolution', resolution);
film=pbrtFilmC('position', oldPos);

%% Add to the 





if ieNotDefined('nLines'),     nLines = false;     end
if ieNotDefined('jitterFlag'), jitterFlag = false; end

% Trace from the point source to the entrance aperture of the
% multielement lens
ppsfCFlag = false;
obj.rays = obj.lens.rtSourceToEntrance(obj.pointSource, ppsfCFlag, jitterFlag);

% Duplicate the existing rays for each wavelength
% Note that both lens and film have a wave, sigh.
% obj.rays.expandWavelengths(obj.film.wave);
obj.rays.expandWavelengths(obj.lens.wave);

%lens intersection and raytrace
obj.lens.rtThroughLens(obj.rays, nLines);

% Something like this?  Extend the rays to the film plane?
% if nLines > 0; obj.rays.draw(obj.film); end

% intersect with "film" and add to film
obj.rays.recordOnFilm(obj.film, nLines);

end